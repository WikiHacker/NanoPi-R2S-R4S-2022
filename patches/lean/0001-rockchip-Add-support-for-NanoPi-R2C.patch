From 874c6e64be1d462930b016d16f86cc9c91a4d2f9 Mon Sep 17 00:00:00 2001
From: dEFIX <1132404+911gt3@users.noreply.github.com>
Date: Tue, 17 Aug 2021 14:01:14 +0800
Subject: [PATCH] rockchip: Add support for NanoPi R2C

---
 target/linux/rockchip/armv8/config-5.10       |   1 +
 target/linux/rockchip/armv8/config-5.4        |   1 +
 ...r-fixed-Add-support-for-off-on-delay.patch |  27 +
 ...Add-driver-for-Motorcomm-YT85xx-PHYs.patch | 472 ++++++++++++++++++
 ...-phy_find_first-for-invalid-phy_addr.patch |  32 ++
 ...m64-dts-rockchip-Add-support-for-R2C.patch |  77 +++
 ...r-fixed-Add-support-for-off-on-delay.patch |  42 ++
 ...Add-driver-for-Motorcomm-YT85xx-PHYs.patch | 472 ++++++++++++++++++
 ...-phy_find_first-for-invalid-phy_addr.patch |  32 ++
 ...m64-dts-rockchip-Add-support-for-R2C.patch |  77 +++
 10 files changed, 1233 insertions(+)
 create mode 100644 target/linux/rockchip/patches-5.10/810-regulator-fixed-Add-support-for-off-on-delay.patch
 create mode 100644 target/linux/rockchip/patches-5.10/811-net-phy-Add-driver-for-Motorcomm-YT85xx-PHYs.patch
 create mode 100644 target/linux/rockchip/patches-5.10/812-net-stmmac-Use-phy_find_first-for-invalid-phy_addr.patch
 create mode 100644 target/linux/rockchip/patches-5.10/813-arm64-dts-rockchip-Add-support-for-R2C.patch
 create mode 100644 target/linux/rockchip/patches-5.4/810-regulator-fixed-Add-support-for-off-on-delay.patch
 create mode 100644 target/linux/rockchip/patches-5.4/811-net-phy-Add-driver-for-Motorcomm-YT85xx-PHYs.patch
 create mode 100644 target/linux/rockchip/patches-5.4/812-net-stmmac-Use-phy_find_first-for-invalid-phy_addr.patch
 create mode 100644 target/linux/rockchip/patches-5.4/813-arm64-dts-rockchip-Add-support-for-R2C.patch

diff --git a/target/linux/rockchip/armv8/config-5.10 b/target/linux/rockchip/armv8/config-5.10
index 96dc5759c..41e65622d 100644
--- a/target/linux/rockchip/armv8/config-5.10
+++ b/target/linux/rockchip/armv8/config-5.10
@@ -375,6 +375,7 @@ CONFIG_MMC_SDHCI_OF_DWCMSHC=y
 # CONFIG_MMC_SDHCI_PCI is not set
 CONFIG_MMC_SDHCI_PLTFM=y
 CONFIG_MODULES_USE_ELF_RELA=y
+CONFIG_MOTORCOMM_PHY=y
 CONFIG_MQ_IOSCHED_DEADLINE=y
 # CONFIG_MTD_CFI is not set
 CONFIG_MTD_CMDLINE_PARTS=y
diff --git a/target/linux/rockchip/armv8/config-5.4 b/target/linux/rockchip/armv8/config-5.4
index 44c1cfe10..debb9ca53 100644
--- a/target/linux/rockchip/armv8/config-5.4
+++ b/target/linux/rockchip/armv8/config-5.4
@@ -355,6 +355,7 @@ CONFIG_MMC_SDHCI_OF_DWCMSHC=y
 # CONFIG_MMC_SDHCI_PCI is not set
 CONFIG_MMC_SDHCI_PLTFM=y
 CONFIG_MODULES_USE_ELF_RELA=y
+CONFIG_MOTORCOMM_PHY=y
 CONFIG_MQ_IOSCHED_DEADLINE=y
 # CONFIG_MTD_CFI is not set
 CONFIG_MTD_CMDLINE_PARTS=y
diff --git a/target/linux/rockchip/patches-5.10/810-regulator-fixed-Add-support-for-off-on-delay.patch b/target/linux/rockchip/patches-5.10/810-regulator-fixed-Add-support-for-off-on-delay.patch
new file mode 100644
index 000000000..2caab3a54
--- /dev/null
+++ b/target/linux/rockchip/patches-5.10/810-regulator-fixed-Add-support-for-off-on-delay.patch
@@ -0,0 +1,27 @@
+From b775633f37f9863247fee4d7d2958c0d5956afd4 Mon Sep 17 00:00:00 2001
+From: hmz007 <hmz007@gmail.com>
+Date: Fri, 20 Dec 2019 20:12:31 +0800
+Subject: [PATCH 1/4] regulator: fixed: Add support for off-on-delay
+
+Signed-off-by: hmz007 <hmz007@gmail.com>
+---
+ drivers/regulator/core.c | 3 +++
+ 1 file changed, 3 insertions(+)
+
+diff --git a/drivers/regulator/core.c b/drivers/regulator/core.c
+index 043b5f63b94a..f13cfb389219 100644
+--- a/drivers/regulator/core.c
++++ b/drivers/regulator/core.c
+@@ -5301,6 +5301,9 @@ regulator_register(const struct regulator_desc *regulator_desc,
+ 		dangling_of_gpiod = false;
+ 	}
+ 
++	if (rdev->desc->off_on_delay)
++		rdev->last_off_jiffy = jiffies;
++
+ 	/* register with sysfs */
+ 	rdev->dev.class = &regulator_class;
+ 	rdev->dev.parent = dev;
+-- 
+2.25.1
+
diff --git a/target/linux/rockchip/patches-5.10/811-net-phy-Add-driver-for-Motorcomm-YT85xx-PHYs.patch b/target/linux/rockchip/patches-5.10/811-net-phy-Add-driver-for-Motorcomm-YT85xx-PHYs.patch
new file mode 100644
index 000000000..9d23794bb
--- /dev/null
+++ b/target/linux/rockchip/patches-5.10/811-net-phy-Add-driver-for-Motorcomm-YT85xx-PHYs.patch
@@ -0,0 +1,472 @@
+From c881823aafee4a26ff1cb5d7cd29c46fa5c7016a Mon Sep 17 00:00:00 2001
+From: hmz007 <hmz007@gmail.com>
+Date: Mon, 5 Jul 2021 17:03:00 +0800
+Subject: [PATCH 2/4] net: phy: Add driver for Motorcomm YT85xx PHYs
+
+Signed-off-by: hmz007 <hmz007@gmail.com>
+---
+ drivers/net/phy/Kconfig       |   5 +
+ drivers/net/phy/Makefile      |   1 +
+ drivers/net/phy/motorcomm.c   | 346 ++++++++++++++++++++++++++++++++++
+ include/linux/motorcomm_phy.h |  68 +++++++
+ 4 files changed, 420 insertions(+)
+ create mode 100644 drivers/net/phy/motorcomm.c
+ create mode 100644 include/linux/motorcomm_phy.h
+
+diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
+index 698bea312adc..626ec44248dc 100644
+--- a/drivers/net/phy/Kconfig
++++ b/drivers/net/phy/Kconfig
+@@ -223,6 +223,11 @@ config MICROSEMI_PHY
+ 	help
+ 	  Currently supports VSC8514, VSC8530, VSC8531, VSC8540 and VSC8541 PHYs
+ 
++config MOTORCOMM_PHY
++	tristate "Motorcomm PHYs"
++	help
++	  Supports the YT8010, YT8510, YT8511, YT8512 PHYs.
++
+ config NATIONAL_PHY
+ 	tristate "National Semiconductor PHYs"
+ 	help
+diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
+index a13e402074cf..ba486136e0f4 100644
+--- a/drivers/net/phy/Makefile
++++ b/drivers/net/phy/Makefile
+@@ -68,6 +68,7 @@ obj-$(CONFIG_MICREL_KS8995MA)	+= spi_ks8995.o
+ obj-$(CONFIG_MICREL_PHY)	+= micrel.o
+ obj-$(CONFIG_MICROCHIP_PHY)	+= microchip.o
+ obj-$(CONFIG_MICROCHIP_T1_PHY)	+= microchip_t1.o
++obj-$(CONFIG_MOTORCOMM_PHY)	+= motorcomm.o
+ obj-$(CONFIG_MICROSEMI_PHY)	+= mscc/
+ obj-$(CONFIG_NATIONAL_PHY)	+= national.o
+ obj-$(CONFIG_NXP_TJA11XX_PHY)	+= nxp-tja11xx.o
+diff --git a/drivers/net/phy/motorcomm.c b/drivers/net/phy/motorcomm.c
+new file mode 100644
+index 000000000000..c53b5b88b226
+--- /dev/null
++++ b/drivers/net/phy/motorcomm.c
+@@ -0,0 +1,346 @@
++/*
++ * drivers/net/phy/motorcomm.c
++ *
++ * Driver for Motorcomm PHYs
++ *
++ * Author: Leilei Zhao <leilei.zhao@motorcomm.com>
++ *
++ * Copyright (c) 2019 Motorcomm, Inc.
++ *
++ * This program is free software; you can redistribute  it and/or modify it
++ * under  the terms of  the GNU General  Public License as published by the
++ * Free Software Foundation;  either version 2 of the  License, or (at your
++ * option) any later version.
++ *
++ * Support : Motorcomm Phys:
++ *		Giga phys: yt8511, yt8521
++ *		100/10 Phys : yt8512, yt8512b, yt8510
++ *		Automotive 100Mb Phys : yt8010
++ *		Automotive 100/10 hyper range Phys: yt8510
++ */
++
++#include <linux/kernel.h>
++#include <linux/module.h>
++#include <linux/phy.h>
++#include <linux/motorcomm_phy.h>
++#include <linux/of.h>
++#include <linux/clk.h>
++
++static int ytphy_read_ext(struct phy_device *phydev, u32 regnum)
++{
++	int ret;
++	int val;
++
++	ret = phy_write(phydev, REG_DEBUG_ADDR_OFFSET, regnum);
++	if (ret < 0)
++		return ret;
++
++	val = phy_read(phydev, REG_DEBUG_DATA);
++
++	return val;
++}
++
++static int ytphy_write_ext(struct phy_device *phydev, u32 regnum, u16 val)
++{
++	int ret;
++
++	ret = phy_write(phydev, REG_DEBUG_ADDR_OFFSET, regnum);
++	if (ret < 0)
++		return ret;
++
++	ret = phy_write(phydev, REG_DEBUG_DATA, val);
++
++	return ret;
++}
++
++static int yt8010_config_aneg(struct phy_device *phydev)
++{
++	phydev->speed = SPEED_100;
++	return 0;
++}
++
++static int yt8512_clk_init(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_AFE_PLL);
++	if (val < 0)
++		return val;
++
++	val |= YT8512_CONFIG_PLL_REFCLK_SEL_EN;
++
++	ret = ytphy_write_ext(phydev, YT8512_EXTREG_AFE_PLL, val);
++	if (ret < 0)
++		return ret;
++
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_EXTEND_COMBO);
++	if (val < 0)
++		return val;
++
++	val |= YT8512_CONTROL1_RMII_EN;
++
++	ret = ytphy_write_ext(phydev, YT8512_EXTREG_EXTEND_COMBO, val);
++	if (ret < 0)
++		return ret;
++
++	val = phy_read(phydev, MII_BMCR);
++	if (val < 0)
++		return val;
++
++	val |= YT_SOFTWARE_RESET;
++	ret = phy_write(phydev, MII_BMCR, val);
++
++	return ret;
++}
++
++static int yt8512_led_init(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++	int mask;
++
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_LED0);
++	if (val < 0)
++		return val;
++
++	val |= YT8512_LED0_ACT_BLK_IND;
++
++	mask = YT8512_LED0_DIS_LED_AN_TRY | YT8512_LED0_BT_BLK_EN |
++		YT8512_LED0_HT_BLK_EN | YT8512_LED0_COL_BLK_EN |
++		YT8512_LED0_BT_ON_EN;
++	val &= ~mask;
++
++	ret = ytphy_write_ext(phydev, YT8512_EXTREG_LED0, val);
++	if (ret < 0)
++		return ret;
++
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_LED1);
++	if (val < 0)
++		return val;
++
++	val |= YT8512_LED1_BT_ON_EN;
++
++	mask = YT8512_LED1_TXACT_BLK_EN | YT8512_LED1_RXACT_BLK_EN;
++	val &= ~mask;
++
++	ret = ytphy_write_ext(phydev, YT8512_LED1_BT_ON_EN, val);
++
++	return ret;
++}
++
++static int yt8512_config_init(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++
++	ret = yt8512_clk_init(phydev);
++	if (ret < 0)
++		return ret;
++
++	ret = yt8512_led_init(phydev);
++
++	/* disable auto sleep */
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_SLEEP_CONTROL1);
++	if (val < 0)
++		return val;
++
++	val &= (~BIT(YT8512_EN_SLEEP_SW_BIT));
++
++	ret = ytphy_write_ext(phydev, YT8512_EXTREG_SLEEP_CONTROL1, val);
++	if (ret < 0)
++		return ret;
++
++	return ret;
++}
++
++static int yt8512_read_status(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++	int speed, speed_mode, duplex;
++
++	ret = genphy_update_link(phydev);
++	if (ret)
++		return ret;
++
++	val = phy_read(phydev, REG_PHY_SPEC_STATUS);
++	if (val < 0)
++		return val;
++
++	duplex = (val & YT8512_DUPLEX) >> YT8512_DUPLEX_BIT;
++	speed_mode = (val & YT8512_SPEED_MODE) >> YT8512_SPEED_MODE_BIT;
++	switch (speed_mode) {
++	case 0:
++		speed = SPEED_10;
++		break;
++	case 1:
++		speed = SPEED_100;
++		break;
++	case 2:
++	case 3:
++	default:
++		speed = SPEED_UNKNOWN;
++		break;
++	}
++
++	phydev->speed = speed;
++	phydev->duplex = duplex;
++
++	return 0;
++}
++
++static int yt8521_config_init(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++
++	/* disable auto sleep */
++	val = ytphy_read_ext(phydev, YT8521_EXTREG_SLEEP_CONTROL1);
++	if (val < 0)
++		return val;
++
++	val &= (~BIT(YT8521_EN_SLEEP_SW_BIT));
++	ret = ytphy_write_ext(phydev, YT8521_EXTREG_SLEEP_CONTROL1, val);
++	if (ret < 0)
++		return ret;
++
++	/* switch to access UTP */
++	ret = ytphy_write_ext(phydev, 0xa000, 0);
++	if (ret < 0)
++		return ret;
++
++	/* enable RXC clock when no wire plug */
++	val = ytphy_read_ext(phydev, 0xc);
++	if (val < 0)
++		return val;
++
++	val &= ~(1 << 12);
++	ret = ytphy_write_ext(phydev, 0xc, val);
++	if (ret < 0)
++		return ret;
++
++	/* output SyncE clock (125mhz) even link is down */
++	ret = ytphy_write_ext(phydev, 0xa012, 0x38);
++	if (ret < 0)
++		return ret;
++
++	/* disable rgmii clk 2ns delay */
++	val = ytphy_read_ext(phydev, 0xa001);
++	if (val < 0)
++		return val;
++
++	val &= ~(1 << 8);
++	ret = ytphy_write_ext(phydev, 0xa001, val);
++	if (ret < 0)
++		return ret;
++
++	/* setup delay */
++	val = (1 << 10) | (0xf << 4) | 5;
++	ret = ytphy_write_ext(phydev, 0xa003, val);
++	if (ret < 0)
++		return ret;
++
++	/* LED0: Unused/Off, LED1: Link, LED2: Activity, 8Hz */
++	ytphy_write_ext(phydev, 0xa00b, 0xe004);
++	ytphy_write_ext(phydev, 0xa00c, 0);
++	ytphy_write_ext(phydev, 0xa00d, 0x2600);
++	ytphy_write_ext(phydev, 0xa00e, 0x0070);
++	ytphy_write_ext(phydev, 0xa00f, 0x000a);
++
++	return 0;
++}
++
++static int yt8521_config_intr(struct phy_device *phydev)
++{
++	int val;
++
++	if (phydev->interrupts == PHY_INTERRUPT_ENABLED)
++		val = BIT(14) | BIT(13) | BIT(11) | BIT(10);
++	else
++		val = 0;
++
++	return phy_write(phydev, REG_INT_MASK, val);
++}
++
++static int yt8521_ack_interrupt(struct phy_device *phydev)
++{
++	int val;
++
++	val = phy_read(phydev, REG_INT_STATUS);
++	phydev_dbg(phydev, "intr status 0x04%x\n", val);
++
++	return (val < 0) ? val : 0;
++}
++
++static struct phy_driver ytphy_drvs[] = {
++	{
++		.phy_id		= PHY_ID_YT8010,
++		.name		= "YT8010 Automotive Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_BASIC_FEATURES,
++		.config_aneg	= yt8010_config_aneg,
++		.read_status	= genphy_read_status,
++	}, {
++		.phy_id		= PHY_ID_YT8510,
++		.name		= "YT8510 100/10Mb Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_BASIC_FEATURES,
++		.read_status	= genphy_read_status,
++	}, {
++		.phy_id		= PHY_ID_YT8511,
++		.name		= "YT8511 Gigabit Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_GBIT_FEATURES,
++		.read_status	= genphy_read_status,
++		.suspend	= genphy_suspend,
++		.resume		= genphy_resume,
++	}, {
++		.phy_id		= PHY_ID_YT8512,
++		.name		= "YT8512 Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_BASIC_FEATURES,
++		.config_init	= yt8512_config_init,
++		.read_status	= yt8512_read_status,
++		.suspend	= genphy_suspend,
++		.resume		= genphy_resume,
++	}, {
++		.phy_id		= PHY_ID_YT8512B,
++		.name		= "YT8512B Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_BASIC_FEATURES,
++		.config_init	= yt8512_config_init,
++		.read_status	= yt8512_read_status,
++		.suspend	= genphy_suspend,
++		.resume		= genphy_resume,
++	}, {
++		.phy_id		= PHY_ID_YT8521,
++		.name		= "YT8521 Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		/* PHY_GBIT_FEATURES */
++		.config_init	= yt8521_config_init,
++		.ack_interrupt	= yt8521_ack_interrupt,
++		.config_intr	= yt8521_config_intr,
++		.suspend	= genphy_suspend,
++		.resume		= genphy_resume,
++	},
++};
++
++module_phy_driver(ytphy_drvs);
++
++MODULE_DESCRIPTION("Motorcomm PHY driver");
++MODULE_AUTHOR("Leilei Zhao");
++MODULE_LICENSE("GPL");
++
++static struct mdio_device_id __maybe_unused motorcomm_tbl[] = {
++	{ PHY_ID_YT8010, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8510, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8511, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8512, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8512B, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8521, MOTORCOMM_PHY_ID_MASK },
++	{ }
++};
++
++MODULE_DEVICE_TABLE(mdio, motorcomm_tbl);
++
+diff --git a/include/linux/motorcomm_phy.h b/include/linux/motorcomm_phy.h
+new file mode 100644
+index 000000000000..1e48c3671b69
+--- /dev/null
++++ b/include/linux/motorcomm_phy.h
+@@ -0,0 +1,68 @@
++/*
++ * include/linux/motorcomm_phy.h
++ *
++ * Motorcomm PHY IDs
++ *
++ * This program is free software; you can redistribute  it and/or modify it
++ * under  the terms of  the GNU General  Public License as published by the
++ * Free Software Foundation;  either version 2 of the  License, or (at your
++ * option) any later version.
++ *
++ */
++
++#ifndef _MOTORCOMM_PHY_H
++#define _MOTORCOMM_PHY_H
++
++#define MOTORCOMM_PHY_ID_MASK	0x00000fff
++
++#define PHY_ID_YT8010		0x00000309
++#define PHY_ID_YT8510		0x00000109
++#define PHY_ID_YT8511		0x0000010a
++#define PHY_ID_YT8512		0x00000118
++#define PHY_ID_YT8512B		0x00000128
++#define PHY_ID_YT8521		0x0000011a
++
++#define REG_PHY_SPEC_STATUS		0x11
++#define REG_INT_MASK			0x12
++#define REG_INT_STATUS			0x13
++#define REG_DEBUG_ADDR_OFFSET		0x1e
++#define REG_DEBUG_DATA			0x1f
++
++#define YT8512_EXTREG_AFE_PLL		0x50
++#define YT8512_EXTREG_EXTEND_COMBO	0x4000
++#define YT8512_EXTREG_LED0		0x40c0
++#define YT8512_EXTREG_LED1		0x40c3
++
++#define YT8512_EXTREG_SLEEP_CONTROL1	0x2027
++
++#define YT_SOFTWARE_RESET		0x8000
++
++#define YT8512_CONFIG_PLL_REFCLK_SEL_EN	0x0040
++#define YT8512_CONTROL1_RMII_EN		0x0001
++#define YT8512_LED0_ACT_BLK_IND		0x1000
++#define YT8512_LED0_DIS_LED_AN_TRY	0x0001
++#define YT8512_LED0_BT_BLK_EN		0x0002
++#define YT8512_LED0_HT_BLK_EN		0x0004
++#define YT8512_LED0_COL_BLK_EN		0x0008
++#define YT8512_LED0_BT_ON_EN		0x0010
++#define YT8512_LED1_BT_ON_EN		0x0010
++#define YT8512_LED1_TXACT_BLK_EN	0x0100
++#define YT8512_LED1_RXACT_BLK_EN	0x0200
++#define YT8512_SPEED_MODE		0xc000
++#define YT8512_DUPLEX			0x2000
++
++#define YT8512_SPEED_MODE_BIT		14
++#define YT8512_DUPLEX_BIT		13
++#define YT8512_EN_SLEEP_SW_BIT		15
++
++#define YT8521_EXTREG_SLEEP_CONTROL1	0x27
++#define YT8521_EN_SLEEP_SW_BIT		15
++
++#define YT8521_SPEED_MODE		0xc000
++#define YT8521_DUPLEX			0x2000
++#define YT8521_SPEED_MODE_BIT		14
++#define YT8521_DUPLEX_BIT		13
++#define YT8521_LINK_STATUS_BIT		10
++
++#endif /* _MOTORCOMM_PHY_H */
++
+-- 
+2.25.1
+
diff --git a/target/linux/rockchip/patches-5.10/812-net-stmmac-Use-phy_find_first-for-invalid-phy_addr.patch b/target/linux/rockchip/patches-5.10/812-net-stmmac-Use-phy_find_first-for-invalid-phy_addr.patch
new file mode 100644
index 000000000..382119809
--- /dev/null
+++ b/target/linux/rockchip/patches-5.10/812-net-stmmac-Use-phy_find_first-for-invalid-phy_addr.patch
@@ -0,0 +1,32 @@
+From f48e9fdefef8677ee52e97a3084db67bec1cd7e2 Mon Sep 17 00:00:00 2001
+From: hmz007 <hmz007@gmail.com>
+Date: Mon, 5 Jul 2021 14:47:15 +0800
+Subject: [PATCH 3/4] net: stmmac: Use phy_find_first() for invalid phy_addr
+
+This make phy-handle optional, and without this property,
+it enables automatic phy discovery.
+
+Signed-off-by: hmz007 <hmz007@gmail.com>
+---
+ drivers/net/ethernet/stmicro/stmmac/stmmac_main.c | 5 ++++-
+ 1 file changed, 4 insertions(+), 1 deletion(-)
+
+diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+index 3134f7e669f8..1ce6a3551891 100644
+--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
++++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+@@ -1068,7 +1068,10 @@ static int stmmac_init_phy(struct net_device *dev)
+ 		int addr = priv->plat->phy_addr;
+ 		struct phy_device *phydev;
+ 
+-		phydev = mdiobus_get_phy(priv->mii, addr);
++		if (addr == -1)
++			phydev = phy_find_first(priv->mii);
++		else
++			phydev = mdiobus_get_phy(priv->mii, addr);
+ 		if (!phydev) {
+ 			netdev_err(priv->dev, "no phy at addr %d\n", addr);
+ 			return -ENODEV;
+-- 
+2.25.1
+
diff --git a/target/linux/rockchip/patches-5.10/813-arm64-dts-rockchip-Add-support-for-R2C.patch b/target/linux/rockchip/patches-5.10/813-arm64-dts-rockchip-Add-support-for-R2C.patch
new file mode 100644
index 000000000..d9c7f9f80
--- /dev/null
+++ b/target/linux/rockchip/patches-5.10/813-arm64-dts-rockchip-Add-support-for-R2C.patch
@@ -0,0 +1,77 @@
+From 956bbe224c6ceb3dfcf105c70d831ec803781b92 Mon Sep 17 00:00:00 2001
+From: dEFIX <1132404+911gt3@users.noreply.github.com>
+Date: Tue, 17 Aug 2021 13:53:49 +0800
+Subject: [PATCH 4/4] arm64: dts: rockchip: Add support for R2C
+
+The only difference between R2C and R2S is the Ethernet PHY chip.
+
+Here are the key notes for dts:
+1) rgmii's drive strength should be 8mA
+2) reset-assert-us should be 15000
+3) The fully compatible tx/rx delay is 0x22/0x12
+
+To remove the phy-handle, the following patch is required.
+ ("stmmac: Use phy_find_first() for invalid phy_addr")
+
+Signed-off-by: dEFIX <1132404+911gt3@users.noreply.github.com>
+---
+ .../boot/dts/rockchip/rk3328-nanopi-r2s.dts   | 23 +++++++++++--------
+ 1 file changed, 13 insertions(+), 10 deletions(-)
+
+diff --git a/arch/arm64/boot/dts/rockchip/rk3328-nanopi-r2s.dts b/arch/arm64/boot/dts/rockchip/rk3328-nanopi-r2s.dts
+index 6eece4e06a08..60cdf5430345 100644
+--- a/arch/arm64/boot/dts/rockchip/rk3328-nanopi-r2s.dts
++++ b/arch/arm64/boot/dts/rockchip/rk3328-nanopi-r2s.dts
+@@ -54,6 +54,7 @@ vcc_rtl8153: vcc-rtl8153-regulator {
+ 		regulator-name = "vcc_rtl8153";
+ 		regulator-min-microvolt = <5000000>;
+ 		regulator-max-microvolt = <5000000>;
++		off-on-delay-us = <5000>;
+ 		enable-active-high;
+ 	};
+ 
+@@ -212,14 +213,16 @@ &gmac2io {
+ 	assigned-clocks = <&cru SCLK_MAC2IO>, <&cru SCLK_MAC2IO_EXT>;
+ 	assigned-clock-parents = <&gmac_clk>, <&gmac_clk>;
+ 	clock_in_out = "input";
+-	phy-handle = <&rtl8211e>;
+ 	phy-mode = "rgmii";
+ 	phy-supply = <&vcc_io_33>;
+ 	pinctrl-0 = <&rgmiim1_pins>;
+ 	pinctrl-names = "default";
+-	rx_delay = <0x18>;
++	rx_delay = <0x12>;
+ 	snps,aal;
+-	tx_delay = <0x24>;
++	snps,reset-active-low;
++	snps,reset-delays-us = <0 15000 50000>;
++	snps,reset-gpio = <&gpio1 RK_PC2 GPIO_ACTIVE_LOW>;
++	tx_delay = <0x22>;
+ 	status = "okay";
+ 
+ 	mdio {
+@@ -228,14 +231,14 @@ mdio {
+ 		#size-cells = <0>;
+ 
+ 		rtl8211e: ethernet-phy@1 {
+-			compatible = "ethernet-phy-id001c.c915",
+-				     "ethernet-phy-ieee802.3-c22";
++			compatible = "ethernet-phy-ieee802.3-c22";
+ 			reg = <1>;
+-			pinctrl-0 = <&eth_phy_reset_pin>;
+-			pinctrl-names = "default";
+-			reset-assert-us = <10000>;
+-			reset-deassert-us = <50000>;
+-			reset-gpios = <&gpio1 RK_PC2 GPIO_ACTIVE_LOW>;
++		};
++
++		ethphy3: ethernet-phy@3 {
++			reg = <3>;
++			interrupt-parent = <&gpio2>;
++			interrupts = <RK_PC4 IRQ_TYPE_EDGE_FALLING>;
+ 		};
+ 	};
+ };
+-- 
+2.25.1
+
diff --git a/target/linux/rockchip/patches-5.4/810-regulator-fixed-Add-support-for-off-on-delay.patch b/target/linux/rockchip/patches-5.4/810-regulator-fixed-Add-support-for-off-on-delay.patch
new file mode 100644
index 000000000..a12cf159b
--- /dev/null
+++ b/target/linux/rockchip/patches-5.4/810-regulator-fixed-Add-support-for-off-on-delay.patch
@@ -0,0 +1,42 @@
+From 037c98b4cb48e452d5771382b50a7156dde75e3a Mon Sep 17 00:00:00 2001
+From: hmz007 <hmz007@gmail.com>
+Date: Fri, 20 Dec 2019 20:12:31 +0800
+Subject: [PATCH 1/4] regulator: fixed: Add support for off-on-delay
+
+Signed-off-by: hmz007 <hmz007@gmail.com>
+---
+ drivers/regulator/core.c  | 3 +++
+ drivers/regulator/fixed.c | 3 +++
+ 2 files changed, 6 insertions(+)
+
+diff --git a/drivers/regulator/core.c b/drivers/regulator/core.c
+index 7fd793d8536c..5b0edaab59a0 100644
+--- a/drivers/regulator/core.c
++++ b/drivers/regulator/core.c
+@@ -5169,6 +5169,9 @@ regulator_register(const struct regulator_desc *regulator_desc,
+ 		dangling_of_gpiod = false;
+ 	}
+ 
++	if (rdev->desc->off_on_delay)
++		rdev->last_off_jiffy = jiffies;
++
+ 	/* register with sysfs */
+ 	rdev->dev.class = &regulator_class;
+ 	rdev->dev.parent = dev;
+diff --git a/drivers/regulator/fixed.c b/drivers/regulator/fixed.c
+index f81533070058..00bb4c88dd95 100644
+--- a/drivers/regulator/fixed.c
++++ b/drivers/regulator/fixed.c
+@@ -159,6 +159,9 @@ static int reg_fixed_voltage_probe(struct platform_device *pdev)
+ 						     &drvdata->desc);
+ 		if (IS_ERR(config))
+ 			return PTR_ERR(config);
++
++		of_property_read_u32(pdev->dev.of_node,
++				     "off-on-delay-us", &drvdata->desc.off_on_delay);
+ 	} else {
+ 		config = dev_get_platdata(&pdev->dev);
+ 	}
+-- 
+2.25.1
+
diff --git a/target/linux/rockchip/patches-5.4/811-net-phy-Add-driver-for-Motorcomm-YT85xx-PHYs.patch b/target/linux/rockchip/patches-5.4/811-net-phy-Add-driver-for-Motorcomm-YT85xx-PHYs.patch
new file mode 100644
index 000000000..bc96f5536
--- /dev/null
+++ b/target/linux/rockchip/patches-5.4/811-net-phy-Add-driver-for-Motorcomm-YT85xx-PHYs.patch
@@ -0,0 +1,472 @@
+From 9717afc710c461e1fa67e10ff4e77fa2106cceaf Mon Sep 17 00:00:00 2001
+From: hmz007 <hmz007@gmail.com>
+Date: Mon, 5 Jul 2021 17:03:00 +0800
+Subject: [PATCH 2/4] net: phy: Add driver for Motorcomm YT85xx PHYs
+
+Signed-off-by: hmz007 <hmz007@gmail.com>
+---
+ drivers/net/phy/Kconfig       |   5 +
+ drivers/net/phy/Makefile      |   1 +
+ drivers/net/phy/motorcomm.c   | 346 ++++++++++++++++++++++++++++++++++
+ include/linux/motorcomm_phy.h |  68 +++++++
+ 4 files changed, 420 insertions(+)
+ create mode 100644 drivers/net/phy/motorcomm.c
+ create mode 100644 include/linux/motorcomm_phy.h
+
+diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
+index dcf2051ef2c0..8960e9236997 100644
+--- a/drivers/net/phy/Kconfig
++++ b/drivers/net/phy/Kconfig
+@@ -434,6 +434,11 @@ config MICROSEMI_PHY
+ 	---help---
+ 	  Currently supports VSC8514, VSC8530, VSC8531, VSC8540 and VSC8541 PHYs
+ 
++config MOTORCOMM_PHY
++	tristate "Motorcomm PHYs"
++	help
++	  Supports the YT8010, YT8510, YT8511, YT8512 PHYs.
++
+ config NATIONAL_PHY
+ 	tristate "National Semiconductor PHYs"
+ 	---help---
+diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
+index a03437e091f3..027427054b1e 100644
+--- a/drivers/net/phy/Makefile
++++ b/drivers/net/phy/Makefile
+@@ -82,6 +82,7 @@ obj-$(CONFIG_MICREL_KS8995MA)	+= spi_ks8995.o
+ obj-$(CONFIG_MICREL_PHY)	+= micrel.o
+ obj-$(CONFIG_MICROCHIP_PHY)	+= microchip.o
+ obj-$(CONFIG_MICROCHIP_T1_PHY)	+= microchip_t1.o
++obj-$(CONFIG_MOTORCOMM_PHY)	+= motorcomm.o
+ obj-$(CONFIG_MICROSEMI_PHY)	+= mscc.o
+ obj-$(CONFIG_NATIONAL_PHY)	+= national.o
+ obj-$(CONFIG_NXP_TJA11XX_PHY)	+= nxp-tja11xx.o
+diff --git a/drivers/net/phy/motorcomm.c b/drivers/net/phy/motorcomm.c
+new file mode 100644
+index 000000000000..c53b5b88b226
+--- /dev/null
++++ b/drivers/net/phy/motorcomm.c
+@@ -0,0 +1,346 @@
++/*
++ * drivers/net/phy/motorcomm.c
++ *
++ * Driver for Motorcomm PHYs
++ *
++ * Author: Leilei Zhao <leilei.zhao@motorcomm.com>
++ *
++ * Copyright (c) 2019 Motorcomm, Inc.
++ *
++ * This program is free software; you can redistribute  it and/or modify it
++ * under  the terms of  the GNU General  Public License as published by the
++ * Free Software Foundation;  either version 2 of the  License, or (at your
++ * option) any later version.
++ *
++ * Support : Motorcomm Phys:
++ *		Giga phys: yt8511, yt8521
++ *		100/10 Phys : yt8512, yt8512b, yt8510
++ *		Automotive 100Mb Phys : yt8010
++ *		Automotive 100/10 hyper range Phys: yt8510
++ */
++
++#include <linux/kernel.h>
++#include <linux/module.h>
++#include <linux/phy.h>
++#include <linux/motorcomm_phy.h>
++#include <linux/of.h>
++#include <linux/clk.h>
++
++static int ytphy_read_ext(struct phy_device *phydev, u32 regnum)
++{
++	int ret;
++	int val;
++
++	ret = phy_write(phydev, REG_DEBUG_ADDR_OFFSET, regnum);
++	if (ret < 0)
++		return ret;
++
++	val = phy_read(phydev, REG_DEBUG_DATA);
++
++	return val;
++}
++
++static int ytphy_write_ext(struct phy_device *phydev, u32 regnum, u16 val)
++{
++	int ret;
++
++	ret = phy_write(phydev, REG_DEBUG_ADDR_OFFSET, regnum);
++	if (ret < 0)
++		return ret;
++
++	ret = phy_write(phydev, REG_DEBUG_DATA, val);
++
++	return ret;
++}
++
++static int yt8010_config_aneg(struct phy_device *phydev)
++{
++	phydev->speed = SPEED_100;
++	return 0;
++}
++
++static int yt8512_clk_init(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_AFE_PLL);
++	if (val < 0)
++		return val;
++
++	val |= YT8512_CONFIG_PLL_REFCLK_SEL_EN;
++
++	ret = ytphy_write_ext(phydev, YT8512_EXTREG_AFE_PLL, val);
++	if (ret < 0)
++		return ret;
++
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_EXTEND_COMBO);
++	if (val < 0)
++		return val;
++
++	val |= YT8512_CONTROL1_RMII_EN;
++
++	ret = ytphy_write_ext(phydev, YT8512_EXTREG_EXTEND_COMBO, val);
++	if (ret < 0)
++		return ret;
++
++	val = phy_read(phydev, MII_BMCR);
++	if (val < 0)
++		return val;
++
++	val |= YT_SOFTWARE_RESET;
++	ret = phy_write(phydev, MII_BMCR, val);
++
++	return ret;
++}
++
++static int yt8512_led_init(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++	int mask;
++
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_LED0);
++	if (val < 0)
++		return val;
++
++	val |= YT8512_LED0_ACT_BLK_IND;
++
++	mask = YT8512_LED0_DIS_LED_AN_TRY | YT8512_LED0_BT_BLK_EN |
++		YT8512_LED0_HT_BLK_EN | YT8512_LED0_COL_BLK_EN |
++		YT8512_LED0_BT_ON_EN;
++	val &= ~mask;
++
++	ret = ytphy_write_ext(phydev, YT8512_EXTREG_LED0, val);
++	if (ret < 0)
++		return ret;
++
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_LED1);
++	if (val < 0)
++		return val;
++
++	val |= YT8512_LED1_BT_ON_EN;
++
++	mask = YT8512_LED1_TXACT_BLK_EN | YT8512_LED1_RXACT_BLK_EN;
++	val &= ~mask;
++
++	ret = ytphy_write_ext(phydev, YT8512_LED1_BT_ON_EN, val);
++
++	return ret;
++}
++
++static int yt8512_config_init(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++
++	ret = yt8512_clk_init(phydev);
++	if (ret < 0)
++		return ret;
++
++	ret = yt8512_led_init(phydev);
++
++	/* disable auto sleep */
++	val = ytphy_read_ext(phydev, YT8512_EXTREG_SLEEP_CONTROL1);
++	if (val < 0)
++		return val;
++
++	val &= (~BIT(YT8512_EN_SLEEP_SW_BIT));
++
++	ret = ytphy_write_ext(phydev, YT8512_EXTREG_SLEEP_CONTROL1, val);
++	if (ret < 0)
++		return ret;
++
++	return ret;
++}
++
++static int yt8512_read_status(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++	int speed, speed_mode, duplex;
++
++	ret = genphy_update_link(phydev);
++	if (ret)
++		return ret;
++
++	val = phy_read(phydev, REG_PHY_SPEC_STATUS);
++	if (val < 0)
++		return val;
++
++	duplex = (val & YT8512_DUPLEX) >> YT8512_DUPLEX_BIT;
++	speed_mode = (val & YT8512_SPEED_MODE) >> YT8512_SPEED_MODE_BIT;
++	switch (speed_mode) {
++	case 0:
++		speed = SPEED_10;
++		break;
++	case 1:
++		speed = SPEED_100;
++		break;
++	case 2:
++	case 3:
++	default:
++		speed = SPEED_UNKNOWN;
++		break;
++	}
++
++	phydev->speed = speed;
++	phydev->duplex = duplex;
++
++	return 0;
++}
++
++static int yt8521_config_init(struct phy_device *phydev)
++{
++	int ret;
++	int val;
++
++	/* disable auto sleep */
++	val = ytphy_read_ext(phydev, YT8521_EXTREG_SLEEP_CONTROL1);
++	if (val < 0)
++		return val;
++
++	val &= (~BIT(YT8521_EN_SLEEP_SW_BIT));
++	ret = ytphy_write_ext(phydev, YT8521_EXTREG_SLEEP_CONTROL1, val);
++	if (ret < 0)
++		return ret;
++
++	/* switch to access UTP */
++	ret = ytphy_write_ext(phydev, 0xa000, 0);
++	if (ret < 0)
++		return ret;
++
++	/* enable RXC clock when no wire plug */
++	val = ytphy_read_ext(phydev, 0xc);
++	if (val < 0)
++		return val;
++
++	val &= ~(1 << 12);
++	ret = ytphy_write_ext(phydev, 0xc, val);
++	if (ret < 0)
++		return ret;
++
++	/* output SyncE clock (125mhz) even link is down */
++	ret = ytphy_write_ext(phydev, 0xa012, 0x38);
++	if (ret < 0)
++		return ret;
++
++	/* disable rgmii clk 2ns delay */
++	val = ytphy_read_ext(phydev, 0xa001);
++	if (val < 0)
++		return val;
++
++	val &= ~(1 << 8);
++	ret = ytphy_write_ext(phydev, 0xa001, val);
++	if (ret < 0)
++		return ret;
++
++	/* setup delay */
++	val = (1 << 10) | (0xf << 4) | 5;
++	ret = ytphy_write_ext(phydev, 0xa003, val);
++	if (ret < 0)
++		return ret;
++
++	/* LED0: Unused/Off, LED1: Link, LED2: Activity, 8Hz */
++	ytphy_write_ext(phydev, 0xa00b, 0xe004);
++	ytphy_write_ext(phydev, 0xa00c, 0);
++	ytphy_write_ext(phydev, 0xa00d, 0x2600);
++	ytphy_write_ext(phydev, 0xa00e, 0x0070);
++	ytphy_write_ext(phydev, 0xa00f, 0x000a);
++
++	return 0;
++}
++
++static int yt8521_config_intr(struct phy_device *phydev)
++{
++	int val;
++
++	if (phydev->interrupts == PHY_INTERRUPT_ENABLED)
++		val = BIT(14) | BIT(13) | BIT(11) | BIT(10);
++	else
++		val = 0;
++
++	return phy_write(phydev, REG_INT_MASK, val);
++}
++
++static int yt8521_ack_interrupt(struct phy_device *phydev)
++{
++	int val;
++
++	val = phy_read(phydev, REG_INT_STATUS);
++	phydev_dbg(phydev, "intr status 0x04%x\n", val);
++
++	return (val < 0) ? val : 0;
++}
++
++static struct phy_driver ytphy_drvs[] = {
++	{
++		.phy_id		= PHY_ID_YT8010,
++		.name		= "YT8010 Automotive Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_BASIC_FEATURES,
++		.config_aneg	= yt8010_config_aneg,
++		.read_status	= genphy_read_status,
++	}, {
++		.phy_id		= PHY_ID_YT8510,
++		.name		= "YT8510 100/10Mb Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_BASIC_FEATURES,
++		.read_status	= genphy_read_status,
++	}, {
++		.phy_id		= PHY_ID_YT8511,
++		.name		= "YT8511 Gigabit Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_GBIT_FEATURES,
++		.read_status	= genphy_read_status,
++		.suspend	= genphy_suspend,
++		.resume		= genphy_resume,
++	}, {
++		.phy_id		= PHY_ID_YT8512,
++		.name		= "YT8512 Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_BASIC_FEATURES,
++		.config_init	= yt8512_config_init,
++		.read_status	= yt8512_read_status,
++		.suspend	= genphy_suspend,
++		.resume		= genphy_resume,
++	}, {
++		.phy_id		= PHY_ID_YT8512B,
++		.name		= "YT8512B Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		.features	= PHY_BASIC_FEATURES,
++		.config_init	= yt8512_config_init,
++		.read_status	= yt8512_read_status,
++		.suspend	= genphy_suspend,
++		.resume		= genphy_resume,
++	}, {
++		.phy_id		= PHY_ID_YT8521,
++		.name		= "YT8521 Ethernet",
++		.phy_id_mask	= MOTORCOMM_PHY_ID_MASK,
++		/* PHY_GBIT_FEATURES */
++		.config_init	= yt8521_config_init,
++		.ack_interrupt	= yt8521_ack_interrupt,
++		.config_intr	= yt8521_config_intr,
++		.suspend	= genphy_suspend,
++		.resume		= genphy_resume,
++	},
++};
++
++module_phy_driver(ytphy_drvs);
++
++MODULE_DESCRIPTION("Motorcomm PHY driver");
++MODULE_AUTHOR("Leilei Zhao");
++MODULE_LICENSE("GPL");
++
++static struct mdio_device_id __maybe_unused motorcomm_tbl[] = {
++	{ PHY_ID_YT8010, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8510, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8511, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8512, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8512B, MOTORCOMM_PHY_ID_MASK },
++	{ PHY_ID_YT8521, MOTORCOMM_PHY_ID_MASK },
++	{ }
++};
++
++MODULE_DEVICE_TABLE(mdio, motorcomm_tbl);
++
+diff --git a/include/linux/motorcomm_phy.h b/include/linux/motorcomm_phy.h
+new file mode 100644
+index 000000000000..1e48c3671b69
+--- /dev/null
++++ b/include/linux/motorcomm_phy.h
+@@ -0,0 +1,68 @@
++/*
++ * include/linux/motorcomm_phy.h
++ *
++ * Motorcomm PHY IDs
++ *
++ * This program is free software; you can redistribute  it and/or modify it
++ * under  the terms of  the GNU General  Public License as published by the
++ * Free Software Foundation;  either version 2 of the  License, or (at your
++ * option) any later version.
++ *
++ */
++
++#ifndef _MOTORCOMM_PHY_H
++#define _MOTORCOMM_PHY_H
++
++#define MOTORCOMM_PHY_ID_MASK	0x00000fff
++
++#define PHY_ID_YT8010		0x00000309
++#define PHY_ID_YT8510		0x00000109
++#define PHY_ID_YT8511		0x0000010a
++#define PHY_ID_YT8512		0x00000118
++#define PHY_ID_YT8512B		0x00000128
++#define PHY_ID_YT8521		0x0000011a
++
++#define REG_PHY_SPEC_STATUS		0x11
++#define REG_INT_MASK			0x12
++#define REG_INT_STATUS			0x13
++#define REG_DEBUG_ADDR_OFFSET		0x1e
++#define REG_DEBUG_DATA			0x1f
++
++#define YT8512_EXTREG_AFE_PLL		0x50
++#define YT8512_EXTREG_EXTEND_COMBO	0x4000
++#define YT8512_EXTREG_LED0		0x40c0
++#define YT8512_EXTREG_LED1		0x40c3
++
++#define YT8512_EXTREG_SLEEP_CONTROL1	0x2027
++
++#define YT_SOFTWARE_RESET		0x8000
++
++#define YT8512_CONFIG_PLL_REFCLK_SEL_EN	0x0040
++#define YT8512_CONTROL1_RMII_EN		0x0001
++#define YT8512_LED0_ACT_BLK_IND		0x1000
++#define YT8512_LED0_DIS_LED_AN_TRY	0x0001
++#define YT8512_LED0_BT_BLK_EN		0x0002
++#define YT8512_LED0_HT_BLK_EN		0x0004
++#define YT8512_LED0_COL_BLK_EN		0x0008
++#define YT8512_LED0_BT_ON_EN		0x0010
++#define YT8512_LED1_BT_ON_EN		0x0010
++#define YT8512_LED1_TXACT_BLK_EN	0x0100
++#define YT8512_LED1_RXACT_BLK_EN	0x0200
++#define YT8512_SPEED_MODE		0xc000
++#define YT8512_DUPLEX			0x2000
++
++#define YT8512_SPEED_MODE_BIT		14
++#define YT8512_DUPLEX_BIT		13
++#define YT8512_EN_SLEEP_SW_BIT		15
++
++#define YT8521_EXTREG_SLEEP_CONTROL1	0x27
++#define YT8521_EN_SLEEP_SW_BIT		15
++
++#define YT8521_SPEED_MODE		0xc000
++#define YT8521_DUPLEX			0x2000
++#define YT8521_SPEED_MODE_BIT		14
++#define YT8521_DUPLEX_BIT		13
++#define YT8521_LINK_STATUS_BIT		10
++
++#endif /* _MOTORCOMM_PHY_H */
++
+-- 
+2.25.1
+
diff --git a/target/linux/rockchip/patches-5.4/812-net-stmmac-Use-phy_find_first-for-invalid-phy_addr.patch b/target/linux/rockchip/patches-5.4/812-net-stmmac-Use-phy_find_first-for-invalid-phy_addr.patch
new file mode 100644
index 000000000..e7301a083
--- /dev/null
+++ b/target/linux/rockchip/patches-5.4/812-net-stmmac-Use-phy_find_first-for-invalid-phy_addr.patch
@@ -0,0 +1,32 @@
+From ab83192d01bc464816151c9a0775afdede56c8a6 Mon Sep 17 00:00:00 2001
+From: hmz007 <hmz007@gmail.com>
+Date: Mon, 5 Jul 2021 14:47:15 +0800
+Subject: [PATCH 3/4] net: stmmac: Use phy_find_first() for invalid phy_addr
+
+This make phy-handle optional, and without this property,
+it enables automatic phy discovery.
+
+Signed-off-by: hmz007 <hmz007@gmail.com>
+---
+ drivers/net/ethernet/stmicro/stmmac/stmmac_main.c | 5 ++++-
+ 1 file changed, 4 insertions(+), 1 deletion(-)
+
+diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+index 10d28be73f45..145502e2d04b 100644
+--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
++++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+@@ -998,7 +998,10 @@ static int stmmac_init_phy(struct net_device *dev)
+ 		int addr = priv->plat->phy_addr;
+ 		struct phy_device *phydev;
+ 
+-		phydev = mdiobus_get_phy(priv->mii, addr);
++		if (addr == -1)
++			phydev = phy_find_first(priv->mii);
++		else
++			phydev = mdiobus_get_phy(priv->mii, addr);
+ 		if (!phydev) {
+ 			netdev_err(priv->dev, "no phy at addr %d\n", addr);
+ 			return -ENODEV;
+-- 
+2.25.1
+
diff --git a/target/linux/rockchip/patches-5.4/813-arm64-dts-rockchip-Add-support-for-R2C.patch b/target/linux/rockchip/patches-5.4/813-arm64-dts-rockchip-Add-support-for-R2C.patch
new file mode 100644
index 000000000..e070809f9
--- /dev/null
+++ b/target/linux/rockchip/patches-5.4/813-arm64-dts-rockchip-Add-support-for-R2C.patch
@@ -0,0 +1,77 @@
+From 721b87a4b202d19cb9d6dfb212b489b37bb8b1ff Mon Sep 17 00:00:00 2001
+From: dEFIX <1132404+911gt3@users.noreply.github.com>
+Date: Tue, 17 Aug 2021 13:50:02 +0800
+Subject: [PATCH 4/4] arm64: dts: rockchip: Add support for R2C
+
+The only difference between R2C and R2S is the Ethernet PHY chip.
+
+Here are the key notes for dts:
+1) rgmii's drive strength should be 8mA
+2) reset-assert-us should be 15000
+3) The fully compatible tx/rx delay is 0x22/0x12
+
+To remove the phy-handle, the following patch is required.
+ ("stmmac: Use phy_find_first() for invalid phy_addr")
+
+Signed-off-by: dEFIX <1132404+911gt3@users.noreply.github.com>
+---
+ .../boot/dts/rockchip/rk3328-nanopi-r2s.dts   | 23 +++++++++++--------
+ 1 file changed, 13 insertions(+), 10 deletions(-)
+
+diff --git a/arch/arm64/boot/dts/rockchip/rk3328-nanopi-r2s.dts b/arch/arm64/boot/dts/rockchip/rk3328-nanopi-r2s.dts
+index 5e4c08a92e86..108cc3a4fd0b 100644
+--- a/arch/arm64/boot/dts/rockchip/rk3328-nanopi-r2s.dts
++++ b/arch/arm64/boot/dts/rockchip/rk3328-nanopi-r2s.dts
+@@ -114,6 +114,7 @@
+ 		regulator-name = "vcc_rtl8153";
+ 		regulator-min-microvolt = <5000000>;
+ 		regulator-max-microvolt = <5000000>;
++		off-on-delay-us = <5000>;
+ 		enable-active-high;
+ 	};
+ 
+@@ -208,14 +209,16 @@
+ 	assigned-clocks = <&cru SCLK_MAC2IO>, <&cru SCLK_MAC2IO_EXT>;
+ 	assigned-clock-parents = <&gmac_clk>, <&gmac_clk>;
+ 	clock_in_out = "input";
+-	phy-handle = <&rtl8211e>;
+ 	phy-mode = "rgmii";
+ 	phy-supply = <&vcc_io_33>;
+ 	pinctrl-0 = <&rgmiim1_pins>;
+ 	pinctrl-names = "default";
+-	rx_delay = <0x18>;
++	rx_delay = <0x12>;
+ 	snps,aal;
+-	tx_delay = <0x24>;
++	snps,reset-active-low;
++	snps,reset-delays-us = <0 15000 50000>;
++	snps,reset-gpio = <&gpio1 RK_PC2 GPIO_ACTIVE_LOW>;
++	tx_delay = <0x22>;
+ 	status = "okay";
+ 
+ 	mdio {
+@@ -224,14 +227,14 @@
+ 		#size-cells = <0>;
+ 
+ 		rtl8211e: ethernet-phy@1 {
+-			compatible = "ethernet-phy-id001c.c915",
+-				     "ethernet-phy-ieee802.3-c22";
++			compatible = "ethernet-phy-ieee802.3-c22";
+ 			reg = <1>;
+-			pinctrl-0 = <&eth_phy_reset_pin>;
+-			pinctrl-names = "default";
+-			reset-assert-us = <10000>;
+-			reset-deassert-us = <50000>;
+-			reset-gpios = <&gpio1 RK_PC2 GPIO_ACTIVE_LOW>;
++		};
++
++		ethphy3: ethernet-phy@3 {
++			reg = <3>;
++			interrupt-parent = <&gpio2>;
++			interrupts = <RK_PC4 IRQ_TYPE_EDGE_FALLING>;
+ 		};
+ 	};
+ };
+-- 
+2.25.1
+
-- 
2.25.1

